services:
  # Backend API
  bookstore-api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Development}
      # Use in-memory database (no SQL Server needed)
      - ConnectionStrings__DefaultConnection=Data Source=:memory:
    ports:
      - "${API_PORT:-5000}:80"
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/books"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  bookstore-frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:${API_PORT:-5000}
        - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      bookstore-api:
        condition: service_healthy
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  bookstore-network:
    driver: bridge

# Optional: SonarQube for when you need code analysis
# Uncomment when you want to run code quality checks
# 
# To enable SonarQube, uncomment below and run:
# docker-compose up -d sonarqube
# Then access it at http://localhost:9000 (admin/admin)
#
# services:
#   sonarqube:
#     image: sonarqube:community
#     environment:
#       - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
#       - SONAR_JDBC_URL=jdbc:h2:mem:sonar
#     ports:
#       - "9000:9000"
#     networks:
#       - bookstore-network
#     volumes:
#       - sonarqube_data:/opt/sonarqube/data
#       - sonarqube_logs:/opt/sonarqube/logs
#       - sonarqube_extensions:/opt/sonarqube/extensions
#
# volumes:
#   sonarqube_data:
#   sonarqube_logs:
#   sonarqube_extensions: