stages:
  - build
  - test
  # - code-analysis
  - deploy

default:
  tags:
    - hva



# =====================
# Build Stage
# =====================
build-frontend:
    stage: build
    image: node:20
    variables:
      CI: "false"
    before_script:
        - cd frontend
        - echo "Installing dependecies" 
        - npm ci
    script:
        - echo "Building the frontend....."
        - npm run build
        - echo "Frontend is built"
    artifacts: 
        paths:
            - frontend/build/
        expire_in: 1 hour

build-backend:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0
  before_script: 
    - cd backend
    - echo "Installing dependecies..."
    - dotnet restore
  script:
    - echo "Building the backend..."
    - dotnet publish --configuration Release --output ./publish
    - echo "Backend is built"
  artifacts:
    paths:
      - backend/publish
    expire_in: 1 hour


# =====================
# Test Stage
# =====================
test-backend:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:9.0
  dependencies:
    - build-backend
  script:
    - cd backend
    - echo "Installing backend dependencies..."
    - dotnet restore
    - echo "Testing Backend..."
    - dotnet test --logger trx --collect:"XPlat Code Coverage"
    - mkdir -p coverage
    - cp -r TestResults/* coverage/
  artifacts:
    paths:
      - backend/coverage
    expire_in: 1 hour



test-frontend:
  stage: test
  image: node:20
  dependencies:
    - build-frontend
  script: 
    - echo "Installing dependecies"
    - npm ci --prefix frontend
    - echo "Accessing the build artifact"
    - echo "Testing Frontend...."
    - npm run test --prefix frontend -- --coverage
    - echo "Testing complete"
  artifacts:
    paths:
      - frontend/coverage
    expire_in: 1 hour










# test-backend:
#   stage: test
#   image: mcr.microsoft.com/dotnet/sdk:9.0
#   tags:
#     - hva
#   script:
#     - cd backend
#     - dotnet test --logger trx --collect:"XPlat Code Coverage"
#   artifacts:
#     reports:
#       junit:
#         - backend/TestResults/test-results.trx
#     paths:
#       - backend/TestResults/
#   only:
#     - main
#     - develop

# test-frontend:
#   stage: test
#   image: node:18-alpine
#   tags:
#     - hva
#   script:
#     - cd frontend
#     - npm ci
#     - npm run test -- --coverage --watchAll=false
#   coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: frontend/coverage/cobertura-coverage.xml
#   only:
#     - main
#     - develop

# # =====================
# # SonarQube Analysis
# # =====================
# sonarqube-backend:
#   stage: code-analysis
#   image: mcr.microsoft.com/dotnet/sdk:9.0
#   tags:
#     - hva
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   cache:
#     key: "sonar-cache-$CI_COMMIT_REF_SLUG"
#     paths:
#       - "${SONAR_USER_HOME}/cache"
#   script:
#     - dotnet tool install --global dotnet-sonarscanner
#     - export PATH="$PATH:$HOME/.dotnet/tools"
#     - dotnet sonarscanner begin /k:"kifleyk_ci_cd_053d9370-3f3a-4ab3-9906-7632cb535e71" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_HOST_URL"
#     - dotnet build backend/BookStore.csproj
#     - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#     - if: $CI_COMMIT_BRANCH == "develop"

# Optional: JS frontend analysis (uncomment if needed)
# sonarqube-frontend:
#   stage: code-analysis
#   image: sonarsource/sonar-scanner-cli:latest
#   tags:
#     - hva
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   cache:
#     key: "sonar-cache-$CI_COMMIT_REF_SLUG"
#     paths:
#       - "${SONAR_USER_HOME}/cache"
#   script:
#     - cd frontend
#     - sonar-scanner -Dsonar.projectKey=frontend-project-key -Dsonar.login=$SONAR_TOKEN
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#     - if: $CI_COMMIT_BRANCH == "develop"

# # =====================
# # Deployment Stages
# # =====================
deploy-dev:
  stage: deploy
  image: debian:bullseye-slim
  dependencies:
    - build-backend 
    - build-frontend 
  before_script: 
    - apt-get update && apt-get install -y openssh-client 
  script: 
    - echo "Deploying development..." 
    - mkdir -p ~/.ssh 
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519 
    - chmod 600 ~/.ssh/id_ed25519 
    - eval $(ssh-agent -s) 
    - ssh-add ~/.ssh/id_ed25519 
    - ssh -o StrictHostKeyChecking=no kifleyk@oege.ie.hva.nl "rm -rf ~/dev/frontend/* && rm -rf ~/dev/backend/* && mkdir -p ~/dev/frontend ~/dev/backend" - echo "Copying frontend files ..." 
    - echo "Copying frontend files..."
    - scp -r frontend/build/* kifleyk@oege.ie.hva.nl:/home/ivi/kifleyk/dev/frontend 
    - echo "Copying backend files..." 
    - scp -r backend/publish/* kifleyk@oege.ie.hva.nl:/home/ivi/kifleyk/dev/backend 
    - echo "Files are copied. Run the files" 
    

# deploy-development:
#   stage: deploy-dev
#   image: docker:20.10.16
#   tags:
#     - hva
#   services:
#     - docker:20.10.16-dind
#   environment:
#     name: development
#     url: http://dev-bookstore.yourdomain.com
#   variables:
#     ENVIRONMENT: "Development"
#     API_PORT: "5001"
#     FRONTEND_PORT: "3001"
#   script:
#     - export DOCKER_IMAGE_API=$CI_REGISTRY_IMAGE/bookstore-api:$CI_COMMIT_SHA
#     - export DOCKER_IMAGE_FRONTEND=$CI_REGISTRY_IMAGE/bookstore-frontend:$CI_COMMIT_SHA
#     - docker-compose -f docker-compose.dev.yml down
#     - docker-compose -f docker-compose.dev.yml up -d
#     - sleep 30
#     - curl -f http://localhost:3001 || exit 1
#   only:
#     - develop
#     - main

# deploy-test:
#   stage: deploy-test
#   image: docker:20.10.16
#   tags:
#     - hva
#   services:
#     - docker:20.10.16-dind
#   environment:
#     name: test
#     url: http://test-bookstore.yourdomain.com
#   variables:
#     ENVIRONMENT: "Test"
#     API_PORT: "5002"
#     FRONTEND_PORT: "3002"
#   script:
#     - export DOCKER_IMAGE_API=$CI_REGISTRY_IMAGE/bookstore-api:$CI_COMMIT_SHA
#     - export DOCKER_IMAGE_FRONTEND=$CI_REGISTRY_IMAGE/bookstore-frontend:$CI_COMMIT_SHA
#     - docker-compose -f docker-compose.test.yml down
#     - docker-compose -f docker-compose.test.yml up -d
#     - sleep 30
#     - curl -f http://localhost:3002 || exit 1
#   when: manual
#   only:
#     - main

# deploy-production:
#   stage: deploy-prod
#   image: docker:20.10.16
#   tags:
#     - hva
#   services:
#     - docker:20.10.16-dind
#   environment:
#     name: production
#     url: http://bookstore.yourdomain.com
#   variables:
#     ENVIRONMENT: "Production"
#     API_PORT: "5000"
#     FRONTEND_PORT: "3000"
#   script:
#     - export DOCKER_IMAGE_API=$CI_REGISTRY_IMAGE/bookstore-api:$CI_COMMIT_SHA
#     - export DOCKER_IMAGE_FRONTEND=$CI_REGISTRY_IMAGE/bookstore-frontend:$CI_COMMIT_SHA
#     - docker-compose -f docker-compose.prod.yml down
#     - docker-compose -f docker-compose.prod.yml up -d
#     - sleep 30
#     - curl -f http://localhost:3000 || exit 1
#   when: manual
#   only:
#     - main

# # =====================
# # Notification Job (Slack)
# # =====================
# notify-results:
#   stage: .post
#   image: alpine:latest
#   tags:
#     - hva
#   before_script:
#     - apk add --no-cache curl
#   script:
#     - |
#       if [ "$CI_JOB_STATUS" = "success" ]; then
#         STATUS="✅ SUCCESS"
#         COLOR="good"
#       else
#         STATUS="❌ FAILED"
#         COLOR="danger"
#       fi
      
#       curl -X POST -H 'Content-type: application/json' \
#       --data "{
#         \"text\": \"Pipeline $STATUS\",
#         \"attachments\": [ {
#           \"color\": \"$COLOR\",
#           \"fields\": [ {
#             \"title\": \"Project\",
#             \"value\": \"$CI_PROJECT_NAME\",
#             \"short\": true
#           }, {
#             \"title\": \"Branch\",
#             \"value\": \"$CI_COMMIT_REF_NAME\",
#             \"short\": true
#           }, {
#             \"title\": \"Commit\",
#             \"value\": \"$CI_COMMIT_SHA\",
#             \"short\": true
#           }, {
#             \"title\": \"Pipeline\",
#             \"value\": \"$CI_PIPELINE_URL\",
#             \"short\": true
#           } ]
#         } ]
#       }" \
#       $SLACK_WEBHOOK_URL
#   when: always
